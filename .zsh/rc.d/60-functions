# various useful functions

# use arrays of hook functions, instead of defining special
# functions outright.  see, eg:
# http://xanana.ucsc.edu/~wgscott/wordpress_new/wordpress/?p=12
typeset -ga preexec_functions
typeset -ga precmd_functions
typeset -ga chpwd_functions

# returns true if we're inside a screen session.
# screen sets the $WINDOW variable, so that should be reliable;
# fall back to checking $TERM just in case
running_in_screen() {
  if [[ ${WINDOW:-no} == "no" && ${TERM} != "screen" ]]; then
    return 1
  fi
  return 0
}

# set the xterm window title or screen hardstatus line
set_title() {
  if running_in_screen ; then
    # Use these two for GNU Screen:
    print -nR $'\033k'$1$'\033'\\\

    print -nR $'\033]0;'$2$'\a'
  elif [[ $TERM == xterm* || $TERM == rxvt* ]]; then
    # Use this one instead for XTerms:
    print -nR $'\033]0;'$*$'\a'
  fi
}

# set the window title (called in precmd)
_precmd_title() {
  set_title "$USER@${HOST:-$HOSTNAME}" "$PWD"
}
precmd_functions+='_precmd_title'

# set the window title to the name of the command (called in preexec)
_preexec_title() {
  emulate -L zsh
  local -a cmd; cmd=(${(z)1})
  set_title $cmd[1]:t "$cmd[2,-1]"
}
preexec_functions+='_preexec_title'

# returns the current git branch, if there is one
current_git_branch() {
  git branch --no-color 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}


#
# vi:set filetype=zsh:
